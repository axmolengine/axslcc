diff --git a/3rdparty/spirv-cross/spirv_glsl.cpp b/3rdparty/spirv-cross/spirv_glsl.cpp
index 6c1d520..7b04143 100644
--- a/3rdparty/spirv-cross/spirv_glsl.cpp
+++ b/3rdparty/spirv-cross/spirv_glsl.cpp
@@ -2317,11 +2317,49 @@ void CompilerGLSL::emit_buffer_block_legacy(const SPIRVariable &var)
 	auto &block_flags = ir.meta[type.self].decoration.decoration_flags;
 	bool block_flag = block_flags.get(DecorationBlock);
 	block_flags.clear(DecorationBlock);
-	emit_struct(type);
+	if (!options.emit_expanded_uniforms) {
+		emit_struct(type);
+		emit_uniform(var);
+		statement("");
+	} else {
+		emit_buffer_block_expanded(var);
+		auto pattern = to_name(var.self);
+		pattern += '.';
+		expanded_uniform_block_patterns.push_back(std::move(pattern));
+	}
 	if (block_flag)
 		block_flags.set(DecorationBlock);
-	emit_uniform(var);
-	statement("");
+}
+
+void CompilerGLSL::emit_buffer_block_expanded(const SPIRVariable& var)
+{
+	auto& type = get<SPIRType>(var.basetype);
+	
+	// Struct types can be stamped out multiple times
+	// with just different offsets, matrix layouts, etc ...
+	// Type-punning with these types is legal, which complicates things
+	// when we are storing struct and array types in an SSBO for example.
+	// If the type master is packed however, we can no longer assume that the struct declaration will be redundant.
+	if (type.type_alias != TypeID(0) && !has_extended_decoration(type.type_alias, SPIRVCrossDecorationBufferBlockRepacked))
+		return;
+
+	add_resource_name(type.self);
+	auto name = type_to_glsl(type);
+	
+	type.member_name_cache.clear();
+	
+	uint32_t i = 0;
+	bool emitted = false;
+	for (auto& member : type.member_types) {
+		add_member_name(type, i);
+		statement_inner("uniform ");
+		emit_struct_member(type, member, i);
+		i++;
+		emitted = true;
+	}
+	
+	if (emitted)
+		statement("");
 }
 
 void CompilerGLSL::emit_buffer_reference_block(uint32_t type_id, bool forward_declaration)
@@ -3767,6 +3805,7 @@ void CompilerGLSL::emit_resources()
 	}
 
 	// Output UBOs and SSBOs
+	expanded_uniform_block_patterns.clear(); // halx99
 	ir.for_each_typed_id<SPIRVariable>([&](uint32_t, SPIRVariable &var) {
 		auto &type = this->get<SPIRType>(var.basetype);
 
@@ -12132,6 +12171,24 @@ CompilerGLSL::TemporaryCopy CompilerGLSL::handle_instruction_precision(const Ins
 	return {};
 }
 
+// halx99
+static int replace_all(std::string& string,
+    const std::string& replaced_key,
+    const std::string& replacing_key)
+{
+    if (replaced_key == replacing_key)
+            return 0;
+    int count = 0;
+    std::string::size_type pos = 0;
+    const size_t predicate = !replaced_key.empty() ? 0 : 1;
+    while ((pos = string.find(replaced_key, pos)) != std::wstring::npos) {
+        (void)string.replace(pos, replaced_key.length(), replacing_key);
+        pos += (replacing_key.length() + predicate);
+        ++count;
+    }
+    return count;
+}
+
 void CompilerGLSL::emit_instruction(const Instruction &instruction)
 {
 	auto ops = stream(instruction);
@@ -12221,6 +12278,13 @@ void CompilerGLSL::emit_instruction(const Instruction &instruction)
 			expr = to_unpacked_expression(ptr);
 		}
 
+		if (options.emit_expanded_uniforms) { // halx99: remove uniform block access prefix (xxx.)
+			const std::string empty_str;
+			for (auto& pattern : expanded_uniform_block_patterns) {
+				replace_all(expr, pattern, empty_str);
+			}
+		}
+
 		auto &type = get<SPIRType>(result_type);
 		auto &expr_type = expression_type(ptr);
 
diff --git a/3rdparty/spirv-cross/spirv_glsl.hpp b/3rdparty/spirv-cross/spirv_glsl.hpp
index 8a00263..ea3fdb9 100644
--- a/3rdparty/spirv-cross/spirv_glsl.hpp
+++ b/3rdparty/spirv-cross/spirv_glsl.hpp
@@ -120,6 +120,9 @@ public:
 		// Does not apply to shader storage or push constant blocks.
 		bool emit_uniform_buffer_as_plain_uniforms = false;
 
+		// halx99: Whether emit expanded uniforms for legacy GLSL 1.x
+		bool emit_expanded_uniforms = false;
+
 		// Emit OpLine directives if present in the module.
 		// May not correspond exactly to original source, but should be a good approximation.
 		bool emit_line_directives = false;
@@ -665,6 +668,7 @@ protected:
 	void emit_buffer_block_native(const SPIRVariable &var);
 	void emit_buffer_reference_block(uint32_t type_id, bool forward_declaration);
 	void emit_buffer_block_legacy(const SPIRVariable &var);
+	void emit_buffer_block_expanded(const SPIRVariable& var); // halx99
 	void emit_buffer_block_flattened(const SPIRVariable &type);
 	void fixup_implicit_builtin_block_names(spv::ExecutionModel model);
 	void emit_declared_builtin_block(spv::StorageClass storage, spv::ExecutionModel model);
@@ -1068,6 +1072,7 @@ private:
 	void set_composite_constant(ConstantID const_id, TypeID type_id, const SmallVector<ConstantID> &initializers);
 	TypeID get_composite_member_type(TypeID type_id, uint32_t member_idx);
 	std::unordered_map<uint32_t, SmallVector<ConstantID>> const_composite_insert_ids;
+	std::vector<std::string> expanded_uniform_block_patterns; // halx99: expanded ub pattern for replace
 };
 } // namespace SPIRV_CROSS_NAMESPACE
 
